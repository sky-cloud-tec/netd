[log]
path = /var/log/netd/netd.log
; EMERGENCY | ALERT | CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG
level = DEBUG
max_size = 10240000

[ingress]
; jrpc listen address
jrpc.addr = 0.0.0.0:8188


[ssh]
; ssh/telnet connect timeout in seconds
timeout = 5
ciphers = aes128-cbc, 3des-cbc
exchanges = diffie-hellman-group-exchange-sha1, diffie-hellman-group1-sha1, diffie-hellman-group-exchange-sha256

; --- asa ---
[(?i)cisco\.asa[a-z]{0,}\.(9|[0-9]{1,})\..*]
; linebreak, default is unix
linebreak = windows
; prompts
prompt.login = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}> $"
prompt.login_enable = [[:alnum:]]{1,}(-[[:alnum:]]+){0,}# $
prompt.configure_terminal = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}\(config\)# $"
; modes
start = "login"
mode.login_or_login_enable = prompt.login, prompt.login_enable
mode.login = prompt.login
mode.login_enable = prompt.login_enable
mode.configure_terminal = prompt.configure_terminal
; transtions
transition.login_enable.configure_terminal = "configure terminal"
transition.configure_terminal.login_enable = "exit"
; error pattern
errs = "^ERROR: .*$"
; predefined encoding
encoding = ""
; cancel more
cancel.login = "terminal pager 0", "terminal pager lines 0"
; debugging
debug.cfg = false
debug.cfg_dir = /var/log/netd/cfgs

; ios
[(?i)cisco\.ios\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "^[[:alnum:]._-]+> ?$"
prompt.login_enable = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}#$"
prompt.configure_terminal = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}\(config\)#$"
; modes
mode.login_or_login_enable = prompt.login, prompt.login_enable
mode.login = prompt.login
mode.login_enable = prompt.login_enable
mode.configure_terminal = prompt.configure_terminal
; transtions
transition.login_enable.configure_terminal = "config terminal"
transition.configure_terminal.login_enable = "exit"
; error pattern
errs = "^Command authorization failed\\.$", "^% ", "^Command rejected:"
; predefined encoding
encoding = ""
; cancel more
cancel.login = "terminal length 0"

; nxos
[(?i)cisco\.NX-OS\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}# $"
prompt.configure_terminal = "[[:alnum:]]{1,}(-[[:alnum:]]+){0,}\(config\)# $"
; modes
mode.login = prompt.login
mode.configure_terminal = prompt.configure_terminal
; transtions
transition.login.configure_terminal = "configure"
transition.configure_terminal.login = "exit"
; error pattern
errs = "^Command authorization failed\\.$", "^% ", "^% Invalid command at '\\^' marker\\."
; predefined encoding
encoding = ""
; cancel more
; cancel.login = ""

; g600
[(?i)brocade\.g600\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "(.*){1,}:([[:alnum:]]+){0,}> "
prompt.option = "\\[no\\] $"
; modes
mode.login = prompt.login, prompt.option
; transtions

; error pattern
errs = "^ERROR: "
; predefined encoding
encoding = ""
; cancel more
; cancel.login = ""

; fw1000
[(?i)dptech\.fw1000\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "<[[:alnum:]\-_.]+>"
prompt.configure = "[[[:alnum:]\-_.]+]"
; modes
mode.login = prompt.login
mode.configure = prompt.configure
; transtions
transition.login.configure = "conf-mode"
transition.configure.login = "end"
; error pattern
errs = "% Unknown command\\."
; predefined encoding
encoding = ""
; cancel more
; cancel.login = ""

; fortigate
[(?i)fortinet\.FortiGate-VM64-KVM\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "[[:alnum:]]{1,}[[:alnum:]-_]{0,} (#|\$) $"
; modes
mode.login = prompt.login
; transtions

; error pattern
errs = "^Unknown action 0$", " # Unknown action 0$", "^command parse error", "^value parse error", "^Command fail. Return code", " # Command fail. Return code", "^please use 'end' to return to root shell", "^entry not found in datasource", "^node_check_object fail"  
; predefined encoding
encoding = ""
; cancel more
cancel.login = "config system console\n\tset output standard\nend"

; secpath
[(?i)h3c\.secpath\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "<[-_[:alnum:][:digit:]]{0,}>$"
prompt.system_view = "\[[-_[:alnum:][:digit:]]{0,}]$"
; modes
mode.login = prompt.login
mode.system_View = prompt.system_view
; transtions
transition.login.system_View = "system-view"
transition.system_View.login = "quit"
; error pattern
errs = "^ % "   
; predefined encoding
encoding = "GB18030"
; cancel more
cancel.login = "screen-length disable"

; sg6000
[(?i)hillstone\.SG-6000-VM01\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "[[:alnum:]._\-~]+(\([[:alnum:]]+\))?# ?$"
prompt.configure = "[[:alnum:]._\-~]+(\([[:alnum:]]+\))?\(config\)# ?$"
; modes
mode.login = prompt.login
mode.configure = prompt.configure
; transtions
transition.login.configure = "configure"
transition.configure.login = "exit"
; error pattern
errs = "\^-+incomplete command", "\^-+unrecognized keyword\s+", "^Error:[\s\S]+"   
; predefined encoding
encoding = ""
; cancel more
cancel.login = "terminal length 0"
; enable ssh session echo
echo = true

; usg
[(?i)huawei\.usg[0-9]{0,}\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "<.{0,246}>$"
prompt.system_view = "\[.{0,246}]$"
prompt.exclude = "-ui-console[0-9]"
prompt.exclude1 = "-ui-vty[0-9]"
prompt.exclude2 = "-policy-security"
prompt.exclude3 = "-object-address-set-"
; modes
mode.login = prompt.login
mode.system_View = prompt.system_view
; transtions
transition.login.system_View = "system-view"
transition.system_View.login = "quit"
; excludes
excludes = prompt.exclude, prompt.exclude1, prompt.exclude2, prompt.exclude3

; error pattern
errs = "^ ?Error:[\s\S]*"   
; predefined encoding
encoding = ""
; cancel more
; cancel.login = ""

; srx
[(?i)juniper\.v?srx\..*]
; linebreak, windows | unix
linebreak=window
; prompts
prompt.login = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+> $"
prompt.config = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+# $"
prompt.login_without_hostname = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}> $"
prompt.config_without_hostname = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}# $"
; modes
mode.login = prompt.login, prompt.login_without_hostname
mode.configure = prompt.config, prompt.config_without_hostname
mode.configure_private = prompt.config, prompt.config_without_hostname
mode.configure_exclusive = prompt.config, prompt.config_without_hostname
; transtions
transition.login.configure_private = "configure private"
transition.configure_private.login = "exit"
transition.login.configure_exclusive = "configure exclusive"
transition.configure_exclusive.login = "exit"
transition.login.configure = "configure"
transition.configure.login = "exit"
; error patterns
errors = "^syntax error\\.$", "^unknown command\\.$", "^missing argument\\.$", "\\^$", "^error:"   
; predefined encoding
encoding = ""
; cancel more
; cancel.login = ""

; ssg
[(?i)juniper\.ssg\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = ".*-> $"
; modes
mode.login = prompt.login
; transtions

; error pattern
errs = "\\^-+unknown keyword .+", "\\^-+command not completed", ": Duplicate entry", "^Service: Not found", "^Failed command -"  
; predefined encoding
encoding = ""
; cancel more
; cancel.login = ""

; centos
[(?i)linux\.centos\.(9|[0-9]{1,})]
; linebreak
linebreak=unix
; prompts
prompt.user = "\[(.*){1,}@(.*){0,} .*\](#|\$) $"
; modes
mode.login = prompt.user
; transtions

; error pattern
errs = ".*command not found.*", ".*No such file or directory.* ", ".*invalid option.*"  
; predefined encoding
encoding = ""
; cancel more
; cancel.login = ""

; panos
[(?i)paloalto\.(pan-os|Panorama)\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+> $"
prompt.active_login = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+\(active\)> $"
prompt.configure = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+# $"
prompt.active_configure = "[[:alnum:]_]{1,}[.]{0,1}[[:alnum:]_-]{0,}[.]{0,1}[[:alnum:]_-]{0,}@[[:alnum:]._-]+\(active\)# $"
; modes
mode.login = prompt.login, prompt.active_login
mode.configure = prompt.configure, prompt.active_configure
; transtions
transition.login.configure = "configure"
transition.configure.login = "exit"
; error pattern
errs = "Invalid syntax\.", "^Server error :", "^Validation Error:", "^Unknown command:\s+"    
; predefined encoding
encoding = ""
; cancel more
cancel.login = "set cli pager off"
; echo
echo = true

; ngfw4000
[(?i)topsec\.NGFW4000(\-UF)?\..*]
; linebreak
linebreak=unix
; prompts
prompt.login = "[[:alnum:]]{1,}[-_[:alnum:]]{0,}; $"
prompt.login2 = "[[:alnum:]]{1,}[-_[:alnum:]]{0,}% $"
; modes
mode.login = prompt.login, prompt.login2
; transtions

; error pattern
errs = "^error"   
; predefined encoding
encoding = "ISO-8859-1"
; cancel more
; cancel.login = ""

; tsos
[(?i)usg\.tsos\..*]
; linebreak,
linebreak = unix
; prompts
prompt.login = ^[[:alnum:]]{1,}> $
prompt.login_enable = ^[[:alnum:]]{1,}# $
prompt.configure_terminal =^[[:alnum:]]{1,}\(config\)# $
; modes
mode.login = prompt.login
mode.login_enable = prompt.login_enable
mode.configure_terminal = prompt.configure_terminal
; transtions
transition.login.login_enable="enable"
transition.login_enable.login="disable"
transition.login_enable.config_terminal = "config terminal"
transition.config_terminal.login_enable = "exit"
; error pattern
errs="^%.*$"